# -*- coding: utf-8 -*-
"""Random_Forest_Classifier_with_joblib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/108Dbap81ZxvgyMgN993apBSc1k60DAyT
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
import joblib

url = 'https://raw.githubusercontent.com/dandia14/project-capstone-team-csd-134/ml/dataset/diabetes.csv'
diabetes = pd.read_csv(url)
diabetes.head()

cols = ["Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI"]
for col in cols:
    diabetes[col].replace(0,np.NaN,inplace=True)

# Mengganti nilai NaN dengan nilai median sesuai target Outcome
for col in diabetes.columns:
    diabetes.loc[(diabetes["Outcome"]==0) & (diabetes[col].isnull()),col] = diabetes[diabetes["Outcome"]==0][col].median()
    diabetes.loc[(diabetes["Outcome"]==1) & (diabetes[col].isnull()),col] = diabetes[diabetes["Outcome"]==1][col].median()

X = diabetes.drop(['Outcome'], axis=1)
y = diabetes['Outcome']

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42, shuffle=False)

rfc = RandomForestClassifier()
model = rfc.fit(X_train, y_train)

mse_train = mean_squared_error(y_pred=rfc.predict(X_train), y_true=y_train)
print('MSE Train :', mse_train)
mse_test = mean_squared_error(y_pred=rfc.predict(X_test), y_true=y_test)
print('MSE Test :', mse_test)

accuracy_train = accuracy_score(y_pred=rfc.predict(X_train), y_true=y_train)
print('Accuracy Score Train :', accuracy_train)
accuracy_test = accuracy_score(y_pred=rfc.predict(X_test), y_true=y_test)
print('Accuracy Score Test :', accuracy_test)

joblib.dump(model, 'model_rfc.pkl')

file = open('./model_rfc.pkl', 'rb')
model = joblib.load(file)

prediksi = X_test[:5].copy()

predict = model.predict(prediksi)

print(predict)

test1 = np.array([11, 138, 74, 26, 144.5, 36.1, 0.557, 50])
test2 = np.array([2, 68, 62, 13, 15, 20.1, 0.257, 23])

ss_test1 = scaler.fit_transform(test1.reshape(-1, 1))
ss_test2 = scaler.fit_transform(test2.reshape(-1, 1))

result1 = model.predict(ss_test1.transpose())
result2 = model.predict(ss_test2.transpose())
print(result1)
print(result2)